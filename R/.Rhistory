loadNamespace("IRanges")
quantile(IRanges::Rle(1:5))
help(make.socket)
make.socket(8293, fail=FALSE)
make.socket(port=8293, fail=FALSE)
s <- make.socket(port=8293, fail=FALSE)
s
str(s)
s <- make.socket(port=113, fail=FALSE)
s <- make.socket(port=7, fail=FALSE)
library(Biostrings)
help(alphabetFrequency)
alphabetFrequency(AAString("CYGGAGTRQ"))
alphabetFrequency
selectMethod(alphabetFrequency, "AAString")
alphabetFrequency(DNAString("ACGT--T"), base.only=TRUE)
alphabetFrequency(DNAString("ACGT--T"), baseOnly=TRUE)
help("PairwiseAlignedXStringSet")
help(PairwiseAlignments)
nw1
nw1
pattern(nw1)
pat <- pattern(nw1)
aligned(pat, degap=TRUE)
help("AlignedXStringSet")
help(readAAMultipleAlignment)
origMAlign
origMAlign
getClass("MultipleAlignment")
getClass("AlignedXStringSet")
selectMethod(map, c("GRanges","GRangesList"))
library(GenomicRanges)
selectMethod(map, c("GRanges","GRangesList"))
readAAMultipleAlignment
.read.MultipleAlignment
Biostrings:::.read.MultipleAlignment
readXStringSet
readDNAStringSet
Biostrings:::.readXStringSet
 cov <- RleList()
cov + RleList(foo = Rle(15, 10))
RleList(foo = Rle(15, 10)) + RleList(foo = Rle(15, 10))
library(BatchJobs)
waitForJobs
help.search("hostname")
R.utils::System$getHostname
library(R.utils)
help(nsl)
solr <- TestSolr()
parallel::mcparallel
mcparallel <- parallel::mcparallel
solr <- TestSolr()
help(make.socket)
solr <- TestSolr()
solr <- TestSolr()
solr <- TestSolr()
capture.output(make.socket(port = 9000, fail=FALSE))
help(sink)
capture.output
help(make.socket)
help(mcparallel)
help(sink)
solr <- TestSolr()
d
sink(NULL)
solr <- TestSolr()
d
sink(NULL)
d
sink(NULL, type="message")
d
solr <- TestSolr()
rm()
rm(solr)
gc()
solr <- TestSolr()
solr
rm(solr)
gc()
help(pskill)
library(utils)
help(pskill)
library(tools)
help(pskill)
pskill(32448, SIGKILL)
pskill
system("pskill -TERM -P 32448")
system("pkill -TERM -P 32448")
solr <- TestSolr()
rm(solr)
gc()
dir("/var/run")
dir("/home/larman/.R/3.1/rsolr/solr/target/tmp")
dir("/home/larman/.R/3.1/rsolr/")
dir("/home/larman/.R/3.1/rsolr/solr")
dir("/home/larman/.R/3.1/rsolr/solr/target")
dir("/home/larman/.R/3.1/rsolr/solr/target/tmp")
getClass("connection")
solr
solr <- TestSolr()
rm(solr)
gc()
solr
sc
nrow(sc)
sc$fields()
options(error=recover)
sc$fields()
uri
response
x
Q
sc
system("ping 127.0.0.1 &")
Sys.getenv
args(unlink)
help(Sys.copy)
args(file.copy)
sc$fields
getSlots("HTTP")
slotNames("HTTP")
v <- 1:10
v[integer()] <- integer()
v[2] <- integer()
args(vapply)
?Methods
rbind
list
getGeneric("list")
paste
c
pmax
IRanges::listClassName("Simple", "NULL")
IRanges:::listClassName("Simple", "NULL")
class(NULL)
setClass("Foo", representation(bar="character"))
foo <- new("Foo")
foo@bar <- 2L
initialize
selectMethod(initialize, "ANY")
setClass("Foo", representation(bar="character"), validity=function(object) if (nchar(object@bar) > 2L) "nchar(bar) must be <= 2L" )
foo@bar <- "foo"
mapply
as(list(), "DocList")
as(list(), "DocCollection")
as(1, "DocCollection")
as(1, "DocList")
selectMethod(coerce, c("list", "DocList"))
selectMethod(coerce, c("list", "DocCollection"))
as(list(2, 3), "DocDataFrame")
selectMethod(coerce, c("list", "DocDataFrame"))
selectMethod(coerce, c("list", "DocDataFrame"))
data(mtcars)
mtcars[,"foo"] <- "bar
"
l <- list(2, 3)
l[1] <- 2
l
mapply(identity, 1:3, NULL)
l
l2 <- l
l1[1] <- NULL
l[1] <- NULL
l
l <- l2
l[[1]] <- NULL
l
l <- l2
mtcars
mtcars[,1:2] <- list(NULL)
mtcars
mtcars[,1] <- list(NULL)
mtcars[,1] <- 1:10
mtcars[,1] <- 1:32
mtcars
library(rtracklayer)
showMethods(coverage)
help(write.csv)
help(file)
help(readChar)
help(readBin)
help(readLines)
help(write.csv)
write.csv(data.frame(foo=I(list(2, 3))), "test.csv")
write.csv(data.frame(foo=I(list(1:2, 3:5))), "test.csv",row.names=FALSE)
df <- data.frame(foo=I(list(1:2, 3:5)))
df
write.csv(csv, "test.csv",row.names=FALSE)
write.csv(df, "test.csv",row.names=FALSE)
df <- data.frame(foo=I(list(c(1, 3, 5), 3:5)))
write.csv(df, "test.csv",row.names=FALSE)
as.character(df$foo)
rownames
help(rownames)
help(rownames)
rownames(data.frame(foo="bar"))
df <- data.frame(foo="bar")
rownames(df) <- NULL
rownames(df)
rownames(df,do.NULL=FALSE)
mtcars
mtcars[,"foo"]
mtcars[,"blah"]
l
l[[5]]
l[1,2]
l[1,]
l["blah"]
sapply(1:10, function(x) NULL)
vapply
l <- list(NULL, 1)
l <- rep(l, 1e6)
system.time(vapply(l, is.null, logical())
)
system.time(vapply(l, is.null, logical(1)))
system.time(as.logical(lapply(l, is.null)))
system.time(as.logical(lapply(l, function(x) is.null(x))))
system.time(as.logical(lapply(l, function(x) is.null(x))))
system.time(as.logical(lapply(l, function(x) is.null(x))))
system.time(as.logical(lapply(l, function(x) is.null(x))))
system.time(as.logical(lapply(l, is.null)))
system.time(as.logical(lapply(l, is.null)))
system.time(as.logical(vapply(l, is.null, logical(1))))
system.time(as.logical(vapply(l, is.null, logical(1))))
system.time(as.logical(lapply(l, is.null)))
integer()[1]
trace("update", browser, sig="SolrCore")
n
debug(.local)
n
value
n
as.character(media)
sc[]
Q
untrace("update", sig="SolrCore")
docs
docs["5"]
docs
names(docs)
docs["5"]
docs@.Data[4]
names(docs@.Data)
c(a=1, b=2)
c(a=1, b=2)->v
v[3] <- c(foo=4)
v
docs["7"] <- list(a=2)
docs
docs[["7"]]
