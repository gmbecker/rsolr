Q
untrace(rsolr:::fromSolr)
trace(rsolr:::fromSolr, browser, sig=c("ANY", "SolrSchema"))
sc[[doc$id]]
n
debug(.local)
n
ans
n
ans
names(ans)
ans@.Data
names(ans@.Data)
ids(ans) <- "1112211111"
ids(ans)
ans
names(ans@.Data)
names(ans@.Data) <- "foo"
names(ans@.Data)
as.list
do.call(list, ans)
children(job)resolveMeta(ans)
resolveMeta(ans)
ans
x <- ans
internal
meta(resolveMeta(ans))
x[,internal]
meta(resolveMeta(ans))[[1]]
meta(resolveMeta(ans)[[1]])
debug(resolveMeta)
meta(resolveMeta(ans))
n
meta(x[[1]])
meta(x)[[1]]
x2 <- x
x[, internal] <- NULL
x
trace("[<-", browser, sig="DocList")
x <- x2
x[, internal] <- NULL
x2
x2
getGeneric("[<-")
trace("[<-", browser, sig=c("DocList", "ANY", "ANY", "ANY"))
x <- x2
x <- x2
x[, internal] <- NULL
x
showMethods("[<-")
j <- internal
x <- x2
x
value
j
xi <- x[[1]]
x <- x2
xi <- x[[1]]
valuei <- NULL
xi
x
i
x[i] <- list(xi)
x
xi
x[i] <- list(xi)
x <- x2
x[i] <- list(xi)
x
resolveMeta(ans)
n
x[, internal] <- NULL
x[, internal] <- NULL
x
class(x[, internal] <- NULL)
class(sc[[doc$id]])
trace(fromSolr, browser, sig=c("ANY", "SolrSchema"))
trace(rsolr:::fromSolr, browser, sig=c("ANY", "SolrSchema"))
sc[[doc$id]]
n
debug(.local)
n
ans
`meta<-` <- rsolr:::`meta<-`
ans
resolveMeta(ans)
n
ans
n
traceback()
options(error=recover)
7
tile
IRanges::tile
getMethod("tile", "Ranges")
ans
read(sc)
trace("[", browser, sig=c("SolrCore", "ANY", "ANY", "ANY"))
n
q
read(x, q = q, ...)
read(x, q = q, ...)[[1]]
Q
untrace("[", sig=c("SolrCore", "ANY", "ANY", "ANY"))
trace("[[", browser, sig=c("SolrCore", "ANY", "ANY"))
n
docs
n
n
untrace("[[", sig=c("SolrCore", "ANY", "ANY"))
compareVersion
options(error=recover)
5
value
as(value, "Media")
as.character(as(value, "Media"))
media
create(object@uri$update, media)
commit(sc)
Q
0
trace(create, browser, "SolrCore")
trace(restfulr:::create, browser, "SolrCore")
0
trace(restfulr:::update, browser, sig="SolrCore")
n
debug(.local)
n
list(...)
create(object@uri$update, media)
commit
0
Q
fun <- function(x) { "x" }
fun2 <- function(y) { match.call(fun) }
fun2(2)
fun2(y=2)
match.call
0
help(which)
library(ScalableGenomics)
fastq.sampler <- FastqSampler(NA12878.20.fastq, n = 1e6,
                              readerBlockSize = 1e6)
set.seed(1975)
fastq <- yield(fastq.sampler)
length(fastq)
'org_babel_R_eoe'
citation("IRanges")
t <- sc[as.character(2:4)]
class(t[[1]]$timestamp_dt)
debug(rsolr:::convertCollection)
n
n
fieldTypes(type, fieldNames(x))
.GlobalEnv$labeledLine <- BiocGenerics:::labeledLine
fieldTypes(type, fieldNames(x))
class(fieldTypes(type, fieldNames(x)))
new("FieldTypeList", fieldTypes(type, fieldNames(x)))
strptime(x, "2014-01-21T00:00:00Z", tz="UTC")
args(strptime)
strptime("2014-01-21T00:00:00Z", "%Y-%m-%dT%H:%M:%SZ", tz="UTC")
class(strptime("2014-01-21T00:00:00Z", "%Y-%m-%dT%H:%M:%SZ", tz="UTC"))
Q
sc@uri
sc@uri@cache
ls(sc@uri@cache)
debug(rsolr:::commitQueryParams)
n
def
n
args
list(...)
args
args
args
args
args
n
args
args
args
args
args
unlist(args)
tolower(unlist(args))
Q
trace("read", browser, sig="SolrCore")
n
x
c
q
n
sc@uri
sc@uri@cache
ls(sc@uri@cache)
SolrCore
RestUri
restfulr:::RestUri
globalRestClientCache()
cache <- restfulr:::globalRestClientCache
rm(list=ls(cache), cache)
args(rm)
rm(list=ls(cache), envir=cache)
cache
cache <- restfulr:::globalRestClientCache()
rm(list=ls(cache), envir=cache)
library(graph)
help(package="graph")
help(inEdges)
gR3
graphNEL
showMethods(coerce)
getClass("graphNEL")
options(error=recover)
6
edgeL
options(error=recover)
17
edgeL
fields
ls(sc@uri@cache)
ls(sc@uri@cache)
ls(sc@uri@cache)
ls(sc@uri@cache)
ls(sc@uri@cache)
options(error=recover)
5
debug(comitQueryParams)
debug(commitQueryParams)
do.call(commitQueryParams, args)
args
args
ls(sc@uri@cache)
ls(sc@uri@cache)
sc@uri@cache)$"http://localhost:8983/solr/select?q=%7b!q.op=OR%20df=id%7d(1112211111)&wt=json"
sc@uri@cache)[["http://localhost:8983/solr/select?q=%7b!q.op=OR%20df=id%7d(1112211111)&wt=json"]]
sc@uri@cache[["http://localhost:8983/solr/select?q=%7b!q.op=OR%20df=id%7d(1112211111)&wt=json"]]
attributes(sc@uri@cache[["http://localhost:8983/solr/select?q=%7b!q.op=OR%20df=id%7d(1112211111)&wt=json"]])
ls(sc@uri@cache)
attributes(sc@uri@cache[["http://localhost:8983/solr/select?q=%7b!q.op=OR%20df=id%7d(1112211111)&wt=json"]])
trace(expired, browser, sig="CacheInfo")
trace(restfulr:::expired, browser, sig="CacheInfo")
trace(restfulr:::expired, browser, sig="CacheInfo")
n
debug(.local)
Sys.time()
x@expires
c
c
Q
ls(sc@uri@cache)
restfulr:::purge(sc@uri@cache)
restfulr:::purge
test_docs
cf <- copyFields(schema(sc))
outEdges("price")
graph::outEdges(cf, "price")
library(graph)
help(inEdges)
inEdges("price_c", cf)
cf@edgeL
debug(rsolr:::parseCopyFields)
n
dest
source
n
nodes
n
edgeL
Q
help(graphNEL)
help(graphNEL)
edges(cg)
edges(cf)
nodes
edgeL
g <- graphNEL(nodes, edgeL, "directed")
inEdges(g, "price_c")
inEdges
inEdges("price_c", g)
c
fieldTypes(schema(sc), "price_c")
test_docs
docs
unmeta(test_docs)
as(docs[1:3], "DocCollection")
test_docs
test_docs[[1]]
docs[[1]]
unmeta(test_docs[[1]])
docs <- lapply(docs, function(x) { x$id <- as.character(x$id); x})
docs
docs[[1]]
unmeta(test_docs[[1]])
identical(docs[[1]], unmeta(test_docs[[1]]))
all.equal(docs[[1]], unmeta(test_docs[[1]]))
class(test_docs[[1]][[4]])
class(docs[[1]][[4]])
strptime
as(test_docs[[1]][[4]], "POSIXct")
as.POSIXct(test_docs[[1]][[4]])
docs <- lapply(docs, function(x) { x$timestamp_dt <- as.POSIXct(x$timestamp_dt); x })
identical(docs[[1]], unmeta(test_docs[[1]]))
test_docs <- lapply(test_docs, function(x) { x$timestamp_dt <- as.POSIXct(x$timestamp_dt); x })
identical(docs[[1]], unmeta(test_docs[[1]]))
all.equal(docs[[1]], unmeta(test_docs[[1]]))
docs[[1]][[4]]
test_docs[[1]][[4]]
class(test_docs[[1]][[4]])
class(docs[[1]][[4]])
args(Sys.time)
as.POSIXct
unlist(list(Sys.time(), Sys.time()))
do.call(c, list(Sys.time(), Sys.time()))
class(do.call(c, list(Sys.time(), Sys.time())))
as.POSIXct(Sys.time(), "UTC")
as.POSIXct(Sys.time(), tz="Z")
help(DateTimeClasses)
attributes(test_docs[[1]][[4]])
attributes(docs[[1]][[4]])
help(DateTimeClasses)
sapply(list(Sys.time()), identity)
sapply
base::sapply
simplify2array
c
array(Sys.time(), c(1, 1, 1))
class(array(Sys.time(), c(1, 1, 1)))
array(Sys.time(), c(1, 1, 1))[,1]
array(Sys.time(), c(1, 1, 1))[,,1]
c(foo=list(a=2,b=3))
unlist(list(foo=list(a=2,b=3)))
do.call(c, list(foo=list(a=2,b=3)))
unlist(list(foo=list(a=2,b=3)), recursive=FALSE)
docs[,"timestamp_dt"][[1]]
lapply(docs[,"timestamp_dt"], identity)
mapply(identity, docs[,"timestamp_dt"])
mapply(identity, docs[,"timestamp_dt"], SIMPLIFY=FALSE)
l <- list(a=1)
l[1] <- Sys.time()
l
l[1] <- list(Sys.time())
l
as.list(Sys.time())
as.list
data(mtcars)
apply(mtcars, 1, identity)
help(apply)
seq_along(mtcars)
docs
docs[,"timestamp_dt",drop=FALSE]
is.atomic(docs[,"timestamp_dt"])
is.vector(docs[,"timestamp_dt"])
as.POSIXlt(docs[,"timestamp_dt"])
is.atomic(as.POSIXlt(docs[,"timestamp_dt"]))
is.list(as.POSIXlt(docs[,"timestamp_dt"]))
as.POSIXlt(docs[,"timestamp_dt"])[[1]]
as.list(as.POSIXlt(docs[,"timestamp_dt"]))
lapply(as.POSIXlt(docs[,"timestamp_dt"]), identity)
as.POSIXlt(docs[,"timestamp_dt"])[i]
as.POSIXlt(docs[,"timestamp_dt"])[1]
as.POSIXlt(docs[,"timestamp_dt"])[2]
dim(1)
is.array
is.array(matrix())
is.atomic(matrix())
vapply
list
is.object
help(is.object)
attributes(docs[,"timestamp_dt"])
attributes(structure(docs[,"timestamp_dt"], tzone="UTC"))
lapply(structure(docs[,"timestamp_dt"], tzone="UTC"), identity)
attributes(lapply(structure(docs[,"timestamp_dt"], tzone="UTC"), identity)[[1]])
do.call(c, lapply(structure(docs[,"timestamp_dt"], tzone="UTC"), identity))
c.Date
docs[[1]]
names(docs)
test_docs
docs
test_docs
all.equal(test_docs, docs[1:3])
all.equal(test_docs[[1]][[4]], docs[[1]][[4]])
str(test_docs[[1]][[4]])
 str(docs[[1]][[4]])
as.vector(test_docs[[1]][[4]])
as.vector(docs[[1]][[4]])
class(as.vector(docs[[1]][[4]]))
args(all.equal)
help(all.equal)
.Machine$double.eps ^ 0.5
all.equal(test_docs[[1]][[4]], docs[[1]][[4]], tolerance=0.1)
all.equal(test_docs[[1]][[4]], docs[[1]][[4]], tolerance=0.01)
all.equal(test_docs[[1]][[4]], docs[[1]][[4]], tolerance=0.001)
all.equal(test_docs[[1]][[4]], docs[[1]][[4]], tolerance=0.01)
checkEquals
options(error=recover)
ids
4
x
i
value
l <- list(1, 2)
l
l[1] <- NULL
l
l[1] <- list(NULL)
l
Filter
Filter(Negate(is.null), docs)
Filter
selectMethod(Filter, "DocCollection")
v <- Filter(Negate(is.null), docs)
f <- Negate(is.null)
x <- docs
ind
ans <- x@.Data[!is.na(ind) & ind]
ans
trace("[", browser, sig=c("DocList", "ANY", "ANY", "ANY"))
    x[!is.na(ind) & ind]
n
initialize(x, ans)
where
Q
options(error=recover)
19
xi
12
fieldNames(x)
fieldTypes(type, character())
as.list(NULL)
trace(rsolr:::convertFields, browser, sig="DocList")
  sc[[doc$id,commit=FALSE]] <- doc
n
types
xi <- x[[1]]
xi
names(types)
Q
options(error=recover)
14
lapply(x, function(xi) { mapply(FUN, xi, types[names(xi)], SIMPLIFY=FALSE) }) 
test_docs <- sc[]
test_docs
docs
trace(update, browser, sig="SolrCore")
doc$id
n
debug(.local)
n
toSolr(value, schema(object))
mapply
base::mapply
trace("update", browser, sig="SolrCore")
n
debug(.local)
n
value
Q
n
value
trace("update", browser, sig="SolrCore")
n
debug(.local)
n
value
toUpdate(value, schema(object))
toSolr(value, schema(object))
trace("toUpdate", browser, sig="DocList")
toUpdate(value, schema(object))
n
delete
n
docs[4]
all.equal(sc[], docs[4])
names(docs[4])
names(sc[])
docs[4][[1]]
docs[[4]][[1]]
sc[[1]][[1]]
sc[][[1]][[1]]
class(docs[[4]]$timestamp_dt)
class(sc[][[1]]$timestamp_dt)
options(error=recover)
trace(update, browser, sig="SolrCore")
  delete(sc)
n
debug(.local)
n
value
value <- list(delete=list(query="*:*"))
value
n
attributes(docs[NULL])
attributes(sc[])
c
c
docs
c
c
